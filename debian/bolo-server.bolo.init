#!/bin/sh
### BEGIN INIT INFO
# Provides:          clockd
# Required-Start:    $network $local_fs
# Required-Stop:     $network $local_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Secure Configuration Management Server
# Description:       Clockwork is a safe, secure and flexible
#                    system for managing system configuration
#                    through enforcement of targeted policies.
### END INIT INFO

# Author: James Hunt <james@jameshunt.us>

PATH=/sbin:/bin
DESC=clockwork
NAME=clockd
DAEMON=/sbin/clockd
DAEMON_ARGS=""
PIDFILE=/var/run/$NAME.pid
SCRIPTNAME=/etc/init.d/clockd

# Exit if the package is not installed
[ -x $DAEMON ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME
TESTER="$DAEMON $DAEMON_ARGS --test"

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
. /lib/lsb/init-functions

do_start() {
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started
	$TESTER >/dev/null || return 2
	start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON --test > /dev/null \
		|| return 1
	start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON -- \
		$DAEMON_ARGS \
		|| return 2
	# Add code here, if necessary, that waits for the process to be ready
	# to handle requests from services started subsequently which depend
	# on this one.  As a last resort, sleep for some time.
}

do_stop() {
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE --name $NAME
	RETVAL="$?"
	[ "$RETVAL" = 2 ] && return 2
	# Wait for children to finish too if this is a daemon that forks
	# and if the daemon is only ever run from this initscript.
	# If the above conditions are not satisfied then add some other code
	# that waits for the process to drop all resources that could be
	# needed by services started subsequently.  A last resort is to
	# sleep for some time.
	start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/5 --exec $DAEMON
	[ "$?" = 2 ] && return 2
	# Many daemons don't delete their pidfiles when they exit.
	rm -f $PIDFILE
	return "$RETVAL"
}

do_reload() {
	$TESTER >/dev/null || return 1
	start-stop-daemon --stop --signal 1 --quiet --pidfile $PIDFILE --name $NAME \
		|| return 1
	return 0
}

case "$1" in
start)
	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC " "$NAME"
	do_start
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2)   [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2)   [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
status)
	status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?
	;;
reload|force-reload)
	[ "$VERBOSE" != "no" ] && log_daemon_msg "Reloading $DESC" "$NAME"
	do_reload
	[ "$VERBOSE" != "no" ] && log_end_msg $?
	;;
restart)
	[ "$VERBOSE" != "no" ] && log_daemon_msg "Restarting $DESC" "$NAME"
	$TESTER >/dev/null
	case "$?" in
		0) ;;
		*) [ "$VERBOSE" != "no" ] && log_end_msg 1; exit $?
	esac

	do_stop
	case "$?" in
	0|1)
		do_start
		case "$?" in
		0) [ "$VERBOSE" != "no" ] && log_end_msg 0 ;;
		1) [ "$VERBOSE" != "no" ] && log_end_msg 1 ;; # Old process is still running
		*) [ "$VERBOSE" != "no" ] && log_end_msg 1 ;; # Failed to start
		esac
		;;
	*)
		# Failed to stop
		[ "$VERBOSE" != "no" ] && log_end_msg 1
		;;
	esac
	;;
*)
	echo "Usage: $SCRIPTNAME {start|stop|status|restart|reload|force-reload}" >&2
	exit 3
	;;
esac

:
