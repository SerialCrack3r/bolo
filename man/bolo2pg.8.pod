=head1 NAME

bolo2pg - Bolo Postgres Subscriber

=head1 SYNOPSIS

B<bolo2pg> -H db01.fqdn -P 5432 -C ~/.creds -e tcp://host:port

B<bolo2pg> -F

B<bolo2pg> -u nobody -g nogroup --pidfile /var/run/my.pid

=head1 DESCRIPTION

#INTRO

B<bolo2pg> is a subscriber that listens to STATEs and TRANSITIONs broadcast
by B<bolo> and stores it in a PostgreSQL database.

=head1 OPTIONS

=over

=item B<-V>, B<--version>

Print version and copyright information.

=item B<-e>, B<--endpoint> I<tcp://host:port>

The bolo broadcast endpoint.  Defaults to I<tcp://127.0.0.1:2997>.
Supports DNS resolution for both IPv4 and IPv6 endpoints.

=item B<-S>, B<--submit> I<tcp://host:port>

The bolo listener endpoint.  Metrics collected by B<bolo2pg> will be
submitted here, for storage and aggregation.  Defaults to
I<tcp://127.0.0.1:2999>.  Supports DNS resolution for both IPv4 and IPv6
endpoints.

=item B<-n>, B<--prefix> I<PREFIX>

A string that will be used to prefix all submitted metric names.
Defaults to I<$fqdn:sys:bolo2pg>, where I<$fqdn> is the fully-qualified
domain name of the local host.

=item B<-F>, B<--foreground>

By default, B<bolo2pg> will fork into the background, detach its terminal
and daemonize itself.  This option inhibits that behavior, and also stops
its from setting the effective UID / GID (see B<-u> and B<-g>).

=item B<-p>, B<--pidfile> I</path/to/pidfile>

Specify where B<bolo2pg> should write its PID to, for control by init
scripts.  Defaults to B</var/run/bolo2pg.pid>.  Has no effect if B<-F> is
given.

=item B<-u>, B<--user> I<USERNAME>

=item B<-g>, B<--group> I<GROUP NAME>

User and group to drop privileges to.  By default, B<bolo2pg> will run as
root:root, which is probably not what you want.

=item B<-H>, B<--host> I<HOSTNAME>

The hostname of the Postgres database server to connec to.
Defaults to I<localhost>.

=item B<-P>, B<--port> I<PORT>

The TCP port to connect to when talking to Postgres.
Defaults to I<5432>.

=item B<-d>, B<--database> I<NAME>

The name of the Postgres database to store data in.
Defaults to I<bolo>.

=item B<-C>, B<--creds> I<PATH>

A path to a (permissions-restricted) file that contains the username and
password for authenticating, in the format "<user>:<password>\n".
By default, no credentials file is used, and binds to the database are attempted
without authentication.

=item B<-I>, B<--inserters> I<NUMBER>

How many inserter threads to spin up.  Each thread will make its own
connection to the backend database, and will independently load new inbound
STATE and TRANSITION data into the staging tables.

See B<INTERNALS> for more details.

=item B<-v>, B<--verbose>

Enable verbose mode, printing debugging information to standard error.

=back

=head1 COLLECTED METRICS

The following metrics are tracked and submitted back to bolo:

=over

=item B<insert.time.s>

How long it takes each insert operation to complete.  The median value of
all collected samples will be submitted up to the bolo core as a SAMPLE
metric.

=item B<insert.ops>

How many insertion operations were performed successfully across all
inserter threads, as a COUNTER.

=item B<insert.errors>

How many insertion operations failed, across all inserter threads, as a
COUNTER.

=item B<reconcile.time.s>

How long each reconcile oeprations takes to complete.  The median value of
all collected samples will be submitted up to the bolo core as a SAMPLE
metric.

=item B<reconcile.ops>

How many reconcile operations were performed successfully, as a COUNTER.

=item B<reconcile.errors>

How many reconcile operations failed, as a COUNTER.

=item B<dispatch.skips>

How many inbound STATE PDUs were ignored by the dispatcher (and I<not> sent
to an inserter thread) based on the suppression mechanism.  See B<INTERNALS>
section for more details.

=item B<dispatch.time.s>

How long each dispatch operation took.  The median value of all collected
samples will be submitted to the bolo core as a SAMPLE metric.

=back

=head1 INTERNALS

(Note: this section is a bit technical, and gets into the implementation of
B<bolo2pg>.)

The B<bolo2pg> subscriber uses the B<Threaded Subscriber Architecture> in
order to scale.

The primary thread is the I<dispatcher>, which subscribes to the bolo
broadcast stream, and dispatches handling of STATEs and TRANSITIONs to a
pool of I<inserters>.

Each I<inserter> maintains a connection to the backend database.  For every
inbound request received, these worker threads insert a single record into
the C<states_staging> table.

The I<reconciler> thread regularly looks through the C<states_staging> table
and reconciles found records with the C<states> table (which tracks the
current state of all things monitored) and the C<history> table (a history
of all state transitions).  For performance reasons, the I<reconciler> only
ever considers the first 500 staging records.  This helps it to avoid long
transactions when the staging table has several (hundreds of thousands) of
records to process.

The number of I<inserter> threads in the pool is governed by the B<-I>
option.  There is only ever one I<reconciler> thread.

For performance reasons, the I<dispatcher> keeps track of states that it has
seen either a STATE or a TRANSITION PDU for.  This allows it to skip
redundant STATE PDUs and substantially lighten the load on the inserter
threads.  The number of skipped operations is reported back to the bolo core
as the B<dispatch.skips> metric.

This "skip strategy" helps B<bolo2pg> to keep the database in a consistent
state in the face of missed TRANSITION PDUs that occur while it was offline
(i.e. during a service restart or a system reboot), without placing undue
stress on the Postgres database instance.

=head1 SEE ALSO

#SEEALSO

=head1 AUTHOR

#AUTHOR
