
                       ########   #######  ##        #######
                       ##     ## ##     ## ##       ##     ##
                       ##     ## ##     ## ##       ##     ##
                       ########  ##     ## ##       ##     ##
                       ##     ## ##     ## ##       ##     ##
                       ##     ## ##     ## ##       ##     ##
                       ########   #######  ########  #######

                       --------------------------------------
                       a simple, performant monitoring system
                       --------------------------------------

   Architecture:

      ----------------.                                      .----------------
                      |--------------.     .-----------------|
          LISTENER    |              |     |                 |    MANAGER
        tcp://*:2999  |      [STATE] |     | [STATE]         |  tcp://*:2998
                      |    [COUNTER] |     | [GET.EVENTS]    |
      ----------------'     [SAMPLE] |     | [GET.KEYS]      '----------------
                              [RATE] |     | [DEL.KEYS]
                             [EVENT] |     | [SEARCH.KEYS]
                          [SET.KEYS] |     | [DUMP]
                                     |     | [SAVESTATE]
                                     |     | [FORGET]
                                     v     v
                              .-------------------.
                              |    BOLO KERNEL    |
                              '-------------------'
                                        |
                                        | [EVENT]
                                        | [TRANSITION]
                                        | [RATE]
           ----------------.            | [STATE]
 client <--                 \           | [COUNTER]
               PUBLISHER     \          | [SAMPLE]
 client <--                   <---------'
              tcp://*:2997   /
 client <--                 /
           ----------------'


  ##############################################################################
  PDUs (LISTENER):

  Socket type:           PULL
  Expected peer socket:  PUSH

     (Note: none of these PDUs have responses, because it is a pull, or
      _write-only_ channel, for performance reasons)

     ---------------------------------------------------------------------------

     STATE                                   ; update the named state, with a
     <TIMESTAMP>                             ; new status code and summary
     <NAME>                                  ; message, in response to data
     <NUMERIC-CODE>                          ; submitted by monitored systems.
     <SUMMARY MSG>

     ---------------------------------------------------------------------------

     COUNTER                                 ; increment a counter
     <TIMESTAMP>
     <NAME>
     <INCREMENT>

     ---------------------------------------------------------------------------

     SAMPLE                                  ; update a sample set with an
     <TIMESTAMP>                             ; arbitrary number of new samples,
     <NAME>                                  ; recalculating min/max/mean/variance
     <VALUE>                                 ; as necessary

     ---------------------------------------------------------------------------

     RATE                                    ; update a sample set with a
     <TIMESTAMP>                             ; number, and calculate the rate
     <NAME>                                  ; (per the sample window).  This is
     <VALUE>                                 ; useful for ever-increasing values
                                             ; like CPU ticks or packets sent.

     ---------------------------------------------------------------------------

     SET.KEYS                                ; set new keys in the config hash.
     <KEY 1>                                 ; semantics of the keys are entirely
     <VALUE 1>                               ; left up to the discretion of the
     ...                                     ; site administrator.
     <KEY N>
     <VALUE N>

     ---------------------------------------------------------------------------

     EVENT                                   ; submit a new event, happening at
     <TIMESTAMP>                             ; a specified time.  name and extra
     <NAME>                                  ; data have no special meaning to
     <EXTRA DATA>                            ; the bolo kernel.

     ---------------------------------------------------------------------------


  ##############################################################################
  PDUs (PUBLISHER):

  Socket type:           PUB
  Expected peer socket:  SUB

     (Note: none of these PDUs have responses, because it is a broadcast, or
      _write-only_ channel.  The kernel doesn't care if anyone is listening)


     ---------------------------------------------------------------------------

     STATE                                    ; broadcast in response to *every*
     <NAME>                                   ; [PUT.STATE] PDU, to inform subs
     <TS>                                     ; of an update to state (even if the
     <STALE>                                  ; status didn't change materially).
     <CODE>
     <SUMMARY>

     ---------------------------------------------------------------------------

     TRANSITION                               ; like [STATE], except the state is
     <NAME>                                   ; only broadcast when the status
     <TS>                                     ; changes significantly (i.e. from
     <STALE>                                  ; OK to WARNING, or CRITICAL to OK)
     <CODE>
     <SUMMARY>

     ---------------------------------------------------------------------------

     SAMPLE                                   ; broadcast on window rollover.
     <TS>                                     ; contains all descriptive quantities
     <NAME>                                   ; of the set.  subscribers can use
     <N>                                      ; this data to update stored data
     <MIN>                                    ; (e.g. RRDs) for use later.
     <MAX>
     <SUM>
     <MEAN>
     <VARIANCE>

     ---------------------------------------------------------------------------

     RATE                                     ; broadcast on window rollover.
     <TS>                                     ; contains the calculated rate,
     <NAME>                                   ; per window interval.
     <WINDOW>
     <VALUE>

     ---------------------------------------------------------------------------

     COUNTER                                  ; broadcast on window rollover.
     <TS>                                     ; subscribers can store the value
     <NAME>                                   ; of the counter (e.g. in RRDs)
     <VALUE>                                  ; for use later.

     ---------------------------------------------------------------------------

     EVENT                                    ; broadcast when a [NEW.EVENT] PDU
     <TS>                                     ; is received.
     <NAME>
     <EXTRA>

     ---------------------------------------------------------------------------


  ##############################################################################
  PDUs (MANAGER):

  Socket type:           ROUTER
  Expected peer socket:  DEALER

     ---------------------------------------------------------------------------

     STATE                 STATE             ; retrieve a single state by name.
     <NAME>                <NAME>
                           <LAST-SEEN>
                           <FRESH>           ; yes or no
                           <STATUS>          ; OK, WARNING, CRITICAL or UNKNOWN
                           <SUMMARY MSG>

     ---------------------------------------------------------------------------

     GET.EVENTS            EVENTS            ; retrieve the currently buffered
     <TIMESTAMP>           <YAML-DATA>       ; event data, optionally limiting
                                             ; to only events on or after a
                                             ; given timestamp (if > 0)

     ---------------------------------------------------------------------------

     GET.KEYS              VALUES            ; retrieve the values of a set of
     <KEY 1>               <KEY 1>           ; config hash keys.
     ...                   <VALUE 1>
     <KEY N>               ...
                           <KEY N>
                           <VALUE N>

     ---------------------------------------------------------------------------

     DEL.KEYS              OK                ; delete keys from the config hash.
     <KEY 1>
     ...
     <KEY N>

     ---------------------------------------------------------------------------

     SEARCH.KEYS           KEYS              ; search the config hash for keys
     <PATTERN>             <KEY 1>           ; matching the given pattern.
                           ...
                           <KEY N>

     ---------------------------------------------------------------------------

     DUMP                  DUMP              ; request a full dump of data, in
                           <YAML-DATA>       ; YAML format.

     ---------------------------------------------------------------------------

     SAVESTATE             OK                ; request that the kernel save its
                                             ; state and keys databases.

     ---------------------------------------------------------------------------

     FORGET                OK                ; request that the kernel drop
     <PAYLOAD>                               ; matching datapoints
     <PATTERN>
     <IGNORE>


  ##############################################################################
  Dump YAML format:

    ---
    name1:
      status:    OK
      message:   Everything is awesome
      last_seen: 1234567890
      fresh:     yes
    name2:
      status:    WARNING
      message:   No results from external source in over 15 minutes
      last_seen: 1234567890
      fresh:     no
    name3:
      # etc.


  ##############################################################################
  Save (binary) file format:

    [magic:u32]      "BOLO"
    [version:u16]    (ASCII)
    [flags:u16]
    [timestamp:i64]
    [count:u32]

    [len:u16]        \
    [lastseen:i64]    \
    [status:u8]        \___ one record
    [stale:u8]         /    per state
    [name:*]\0        /
    [summary:*]\0    /

    \0\0             <----- NUL trailer, EOF
                            (or, an empty 'len')

# vim:et
