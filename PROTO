
                       ########   #######  ##        #######
                       ##     ## ##     ## ##       ##     ##
                       ##     ## ##     ## ##       ##     ##
                       ########  ##     ## ##       ##     ##
                       ##     ## ##     ## ##       ##     ##
                       ##     ## ##     ## ##       ##     ##
                       ########   #######  ########  #######

                       --------------------------------------
                       a simple, performant monitoring system
                       --------------------------------------

   Architecture:

                                                [STATE]
                                                [EVENT]      .----------------------
   ----------------.                            [COUNTER]   /
                   |                            [SAMPLE]   /        (clients)
     NSCA gateway  |                           .--------->         tcp://*:2997
       TCP/5667    |------.                    |           \    PUB/SUB BROADCAST
                   |      | [PUT.STATE]        |            \
   ----------------'      | [PUT.COUNTER]      |             '----------------------
                          | [PUT.SAMPLE]       |
                          | [SET.KEYS]         |
                          | [DEL.KEYS]         |
   ----------------.      |                    |      [GET.STATE]    .----------------
                   |      |    .-------------------.  [GET.KEYS]     |
       LISTENER    |      |    |      kernel       |  [SEARCH.KEYS]  |   CONTROLLER
     tcp://*:2999  |------'--->|  inproc://kernel  |<----------------|  tcp://*:2998
                   |           '-------------------'  [DUMP]         |
   ----------------'                    ^                            '----------------
                                        |  [TICK]
                                        |  [CHECKFRESH]
                                        |  [SAVESTATE]
                                        |
                               .-----------------.
                               |    scheduler    |
                               '-----------------'


  ##############################################################################
   Threads:
     1. listener     - Handles inbound state/counter/sample result submission
     2. NSCA gateway - Demuxes inbound NSCA packets into state/sample results
     3. controller   - Handles inbound control messages, like DUMP
     4. kernel       - Manages the internal database / broadcast events
     5. scheduler    - Issues timed commands (a la interrupts) to the kernel


  ##############################################################################
   PDUs (kernel):

     ---------------------------------------------------------------------------

     PUT.STATE             OK                ; update the named state, with a
     <TIMESTAMP>                             ; new status code and summary
     <NAME>                                  ; message, in response to data
     <NUMERIC-CODE>                          ; submitted by monitored systems.
     <SUMMARY MSG>

     ---------------------------------------------------------------------------

     PUT.COUNTER           OK                ; increment a counter
     <TIMESTAMP>
     <NAME>
     <INCREMENT>

     ---------------------------------------------------------------------------

     PUT.SAMPLE            OK                ; update a sample set with an
     <TIMESTAMP>                             ; arbitrary number of new samples,
     <NAME>                                  ; recalculating min/max/mean/variance
     <SAMPLE 1>                              ; as necessary
     ...
     <SAMPLE N>

     ---------------------------------------------------------------------------

     SET.KEYS              OK                ; set new keys in the config hash.
     <KEY 1>                                 ; semantics of the keys are entirely
     <VALUE 1>                               ; left up to the discretion of the
     ...                                     ; site administrator.
     <KEY N>
     <VALUE N>

     ---------------------------------------------------------------------------

     DEL.KEYS              OK                ; delete keys from the config hash.
     <KEY 1>
     ...
     <KEY N>

     ---------------------------------------------------------------------------

     GET.STATE             STATE             ; retrieve a single state, by name,
     <NAME>                <NAME>            ; from the current database
                           <LAST-SEEN>
                           <FRESH>           ; yes or no
                           <STATUS>          ; OK, WARNING, CRITICAL or UNKNOWN
                           <SUMMARY MSG>

     ---------------------------------------------------------------------------

     GET.KEYS              VALUES            ; retrieve the values of a set of
     <KEY 1>               <KEY 1>           ; config hash keys.
     ...                   <VALUE 1>
     <KEY N>               ...
                           <KEY N>
                           <VALUE N>

     ---------------------------------------------------------------------------

     SEARCH.KEYS           KEYS              ; search the config hash for keys
     <PATTERN>             <KEY 1>           ; matching the given pattern.
                           ...
                           <KEY N>

     ---------------------------------------------------------------------------

     DUMP                  DUMP              ; dumps all stats in a YAML file,
                           <FILE>

     ---------------------------------------------------------------------------

     TICK                  OK                ; fired every interval.  used by the
                                             ; kernel for closing out sample and
                                             ; counter windows.

     ---------------------------------------------------------------------------

     CHECKFRESH            OK                ; prompts the kernel to assess the
                                             ; freshness of all tracked states

     ---------------------------------------------------------------------------

     SAVESTATE             OK                ; prompts the kernel to write the
                                             ; current state to a binary file
                                             ; that it can re-read on next boot

     ---------------------------------------------------------------------------

     *                     ERROR             ; error reply, with friendly error
                           <MESSAGE>         ; message text

     ---------------------------------------------------------------------------


  ##############################################################################
  PDUs (broadcast):

     (Note: none of these PDUs have responses, because it is a broadcast, or
      _write-only_ channel.  The kernel doesn't care if anyone is listening)


     ---------------------------------------------------------------------------

     STATE                                    ; broadcast in response to *every*
     <TS>                                     ; [PUT.STATE] PDU, to inform subs
     <NAME>                                   ; of an update to state (even if the
     <CODE>                                   ; status didn't change materially).
     <SUMMARY>

     ---------------------------------------------------------------------------

     EVENT                                    ; like [STATE], except the state is
     <TS>                                     ; only broadcast when the status
     <NAME>                                   ; changes significantly (i.e. from
     <CODE>                                   ; OK to WARNING, or CRITICAL to OK)
     <SUMMARY>

     ---------------------------------------------------------------------------

     SAMPLE                                   ; broadcast on window rollover.
     <TS>                                     ; contains all descriptive quantities
     <NAME>                                   ; of the set.  subscribers can use
     <N>                                      ; this data to update stored data
     <MIN>                                    ; (e.g. RRDs) for use later.
     <MAX>
     <SUM>
     <MEAN>
     <VARIANCE>

     ---------------------------------------------------------------------------

     COUNTER                                  ; broadcast on window rollover.
     <TS>                                     ; subscribers can store the value
     <NAME>                                   ; of the counter (e.g. in RRDs)
     <VALUE>                                  ; for use later.

     ---------------------------------------------------------------------------


  ##############################################################################
  PDUs (native listener):

     ---------------------------------------------------------------------------

     STATE                 OK                ; set the code / status / summary
     <NAME>                                  ; of a state.  yields a PUT.STATE
     <NUMERIC-CODE>                          ; to the kernel
     <SUMMARY>

     ---------------------------------------------------------------------------

     COUNTER               OK                ; increment a counter
     <NAME>                                  ; yields a PUT.COUNTER to the kernel
     <INCREMENT>

     ---------------------------------------------------------------------------

     SAMPLE                OK                ; update a sample set with a new
     <NAME>                                  ; sample, recalculating
     <VALUE>                                 ; min/max/mean/variance as necessary
                                             ; yields a PUT.SAMPLE to the kernel

     ---------------------------------------------------------------------------


  ##############################################################################
  PDUs (controller):

     ---------------------------------------------------------------------------

     STATE                 STATE             ; retrieve a single state by name.
     <NAME>                <NAME>            ; yields a GET.STATE to the kernel
                           <LAST-SEEN>
                           <FRESH>           ; yes or no
                           <STATUS>          ; OK, WARNING, CRITICAL or UNKNOWN
                           <SUMMARY MSG>

     ---------------------------------------------------------------------------

     DUMP                  DUMP              ; request a full dump of data, in
                           <YAML-DATA>       ; YAML format.  yields a DUMP to
                                             ; the kernel

     ---------------------------------------------------------------------------


  ##############################################################################
  Dump YAML format:

    ---
    name1:
      status:    OK
      message:   Everything is awesome
      last_seen: 1234567890
      fresh:     yes
    name2:
      status:    WARNING
      message:   No results from external source in over 15 minutes
      last_seen: 1234567890
      fresh:     no
    name3:
      # etc.


  ##############################################################################
  Save (binary) file format:

    [magic:u32]      "BOLO"
    [version:u16]    (ASCII)
    [flags:u16]
    [timestamp:i64]
    [count:u32]

    [len:u16]        \
    [lastseen:i64]    \
    [status:u8]        \___ one record
    [stale:u8]         /    per state
    [name:*]\0        /
    [summary:*]\0    /

    \0\0             <----- NUL trailer, EOF
                            (or, an empty 'len')

# vim:et
