##
## bolo.conf - Configuration file for the Bolo Kernel
##
## This sample file has been provided to help experienced administrators
## set up and configure a Clockwork Policy Master quickly.  All default
## values have been commented out.
##
## You are STRONGLY encouraged to read up on the proper configuration of
## a bolo server, from a security standpoint; see bolo(8)
##
## For more in-depth information, see bolo.conf(5)
##



#############################################################
##
##   GLOBAL CONFIGURATION
##

# What address and port to bind on, and listen for inbound data
# submission from monitored hosts.  Note: if you wish to specify
# a single interface, you must specify it as an IP address.
listener   tcp://*:2999

# What address and port to bind on, and listen for inbound
# query and control requests from management hosts.  The default
# bind on loopback (127.0.0.1) was chosen for security.
controller tcp://127.0.0.1:2998

# What address and port to bind on, and broadcast data via.
# Subscribers will need to connect to this endpoint to do their
# jobs.  As with `listener' and `controller', specific interfaces
# can be bound, but must be specified by IP address.
broadcast  tcp://*:2997

# What address and port to bind on, and send heartbeat signals.
# agents will need to subscribe to this endpoint to recieve
# beacon messages. As with `listener', `controller' and
# `broadcast', specific interfaces can be bound, but must be
# specified by IP address.
beacon     tcp://*:2996

# Controls how bolo logs, where it sends log messages, and what
# messages are allowed to be logged.
#
# The first token is the log level, one of debug, info, notice,
# warning, error, alert, critical, or emergency.
#
# The second token is the syslog facility to log to, one of daemon,
# or local0-local7.
log info daemon

# bolo will periodically save its state, counter, sample and event
# data to this file, to avoid data loss in the event of application
# or host outages.
savefile  /var/lib/bolo/save.db

# The keysfile is like the savefile, except that user-provided configuration
# data (via KEY statements through send_bolo(1)) will be written there.
keysfile  /var/lib/bolo/keys.db

# When stat_bolo(1) initiates a DUMP to get all of the state, event and
# metric data from bolo, that information is written to disk, using this
# pattern to generate randomized temporary files.  The first `%s' will be
# replaced with a random value.  Subsequent `%s' tokens are ignored.
dumpfiles /var/tmp/mon.%s

# The time to wait between sending heartbeat (beacon) signals. interval
# is specified in seconds.
sweep     60

#############################################################
##
##   STATE TYPES
##

# Each `type' stanza defines a named state type, which supplies
# some configuration to each state tracked.  State type names
# must always start with a colon (:), and can consist only of
# alphanumeric characters, hyphens (-) and underscores (_).
# Each type name must be unique.

# NOTE: No state types will be defined by default.

type :local-check {
  # How many seconds will bolo wait for a new STATE result
  # before it decides that the state is stale, and triggers
  # a non-OK state, synthetically?
  freshness 300

  # The type of state to trigger when the freshness threshold
  # is exceeded (one of warning, critical or unknown), and
  # the message to use.
  critical "no result from local monitoring system"
}

type :log-check {
  freshness 1800
  warning "no result from log checker in over 30 minutes"
}

#############################################################
##
##   SAMPLE / COUNTER / RATE WINDOWS
##

# When bolo receives metric data, it will attempt to buffer
# and aggregate that data, according to the defined window.
#
# For sampled data, datapoints are collected until the window
# rolls over, and then an aggregate (average, variance, etc.)
# for that window and those data points is broadcast.
#
# For counter data, the value of the counter will increment
# until the window rolls over.
#
# For rate data, the difference between the first value seen in
# the window, and the last value seen, will be divided over the
# window to come up with a rate of change.
#
# Each window has a name and a timeframe specified in seconds.
# All window names start with the at-sign (@), and may consist
# only of alphanumeric characters, hyphens (-) and underscores (_).
# Each window name must be unique.

window @minutely 60
window @hourly   3600

#############################################################
##
##   STATE CONFIGURATION
##

# Bolo requires you to identify what states it should manage.
# This can be done either directly (one definition per state
# name) or indirectly (via a pattern match).  Each definition
# must tie the state name to a state type (defined above)

# Here, we define a single state, named www-health, using the
# `:local-check' state type:
state :local-check www-health

# Often, however, you'll want to define a pattern, to match
# more than one state name, and save yourself the typing.
# Here, we instruct bolo to accept all CPU-related states:
state :local-check m/cpu/

#############################################################
##
##   SAMPLE / COUNTER / RATE CONFIGURATION
##

# Like states, samples, rates and counters must be defined in order
# for bolo to properly aggregate them.  This can also be done
# directly, or via pattern matching:

sample @minutely a-single-sample
sample @minutely m/:sar:/          # Matches host1:sar:df,
                                   #         host2:sar:cpu, etc

counter @minutely m/transacts/
counter @minutely m/^http-40\d$/   # Matches http-403 and http-404,
                                   # but not http-200 or  http-415.

rate    @minutely m/:cpu:/

# You can also save some more typing with the `use' keyword,
# which elects a metric window to be the default, for sample
# and counter definitions that don't explicitly associate one:
use @hourly
counter hourly-counter1
counter m/-hourly$/
sample  hourly-transactions
rate    m/-per-hour$/
