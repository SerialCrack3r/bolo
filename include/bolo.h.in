/*
  Copyright (c) 2016 The Bolo Authors.  All Rights Reserved.

  This file is part of Bolo.

  Bolo is free software: you can redistribute it and/or modify it under the
  terms of the GNU General Public License as published by the Free Software
  Foundation, either version 3 of the License, or (at your option) any later
  version.

  Bolo is distributed in the hope that it will be useful, but WITHOUT ANY
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
  details.

  You should have received a copy of the GNU General Public License along
  with Bolo.  If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef BOLO_H
#define BOLO_H

#include <vigor.h>

#define BOLO_VERSION "@VERSION@"

#define OK       0
#define WARNING  1
#define CRITICAL 2
#define UNKNOWN  3
#define PENDING  4

#define PAYLOAD_STATE     0x0001
#define PAYLOAD_COUNTER   0x0002
#define PAYLOAD_RATE      0x0004
#define PAYLOAD_SAMPLE    0x0008
#define PAYLOAD_EVENT     0x0010
#define PAYLOAD_FACT      0x0020
#define PAYLOAD_RESERVED  0xff70
#define PAYLOAD_ALL       0xffff

typedef struct __bolo_name* bolo_name_t;

bolo_name_t bolo_name_parse(const char *);
bolo_name_t bolo_name_copy(bolo_name_t);
char*       bolo_name_string(bolo_name_t);
int         bolo_name_match(bolo_name_t, bolo_name_t);
int         bolo_name_set(bolo_name_t, const char*, const char*);
int         bolo_name_unset(bolo_name_t, const char*);
int         bolo_name_concat(bolo_name_t, bolo_name_t);

typedef struct __bolo_subscriber* bolo_subscriber_t;
typedef int (*bolo_subscriber_fn)(pdu_t*, void*);

bolo_subscriber_t bolo_subscriber_new();
int bolo_subscriber_set(bolo_subscriber_t, int, void*, size_t);
int bolo_subscriber_get(bolo_subscriber_t, int, void**, size_t*);
int bolo_subscriber_run(bolo_subscriber_t, bolo_subscriber_fn, void*);
int bolo_subscriber_wait(bolo_subscriber_t);
void bolo_subscriber_track(const char *, ...);

pdu_t* bolo_FORGET(unsigned int, const char*, int);
pdu_t* bolo_STATE(const char*, int, const char*);
pdu_t* bolo_COUNTER(const char*, unsigned int);
pdu_t* bolo_SAMPLE(const char*, int, ...);
pdu_t* bolo_RATE(const char*, unsigned long);
pdu_t* bolo_SETKEYS(int n, ...);
pdu_t* bolo_EVENT(const char*, const char*);

int bolo_send_FORGET(unsigned int, const char*, int);
int bolo_send_STATE(const char*, int, const char*);
int bolo_send_COUNTER(const char*, unsigned int);
int bolo_send_SAMPLE(const char*, int, ...);
int bolo_send_RATE(const char*, unsigned long);
int bolo_send_SETKEYS(int n, ...);
int bolo_send_EVENT(const char*, const char*);

pdu_t *parse_state_pdu  (int argc, char **argv, const char *ts);
pdu_t *parse_counter_pdu(int argc, char **argv, const char *ts);
pdu_t *parse_sample_pdu (int argc, char **argv, const char *ts);
pdu_t *parse_rate_pdu   (int argc, char **argv, const char *ts);
pdu_t *parse_setkeys_pdu(int argc, char **argv);
pdu_t *parse_event_pdu  (int argc, char **argv, const char *ts);
pdu_t *stream_pdu(const char *line);

pdu_t *forget_pdu  (uint16_t payload, const char *regex, uint8_t ignore);
pdu_t *state_pdu   (const char *name, int status, const char *msg);
pdu_t *counter_pdu (const char *name, unsigned int value);
pdu_t *sample_pdu  (const char *name, int n, ...);
pdu_t *rate_pdu    (const char *name, unsigned long value);
pdu_t *setkeys_pdu (int n, ...);
pdu_t *event_pdu   (const char *name, const char *extra);

/* subscriber */
int subscriber_init(void);
int subscriber_monitor_thread(void *zmq, const char *prefix, const char *endpoint);
int subscriber_scheduler_thread(void *zmq, int interval);
int subscriber_supervisor(void *zmq);
int subscriber_metrics(void *zmq, ...);
int subscriber_connect_monitor(void *zmq, void **zocket);
int subscriber_connect_scheduler(void *zmq, void **zocket);
int subscriber_connect_supervisor(void *zmq, void **zocket);

#endif
